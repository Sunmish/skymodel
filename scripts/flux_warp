#! /usr/bin/env python

from argparse import ArgumentParser

from astropy.io import fits

from skymodel.fluxmatch import fluxscale, correction_factor_map, apply_corrections, plot

import logging
logging.basicConfig(format="%(levelname)s (%(module)s): %(message)s",
                    level=logging.INFO)

def main():
    """
    """

    ps = ArgumentParser()

    ps.add_argument("model_table")
    ps.add_argument("image")
    ps.add_argument("-f", "--freq", type=float)
    ps.add_argument("-o", "--outname", type=str, default=None)
    ps.add_argument("-t", "--threshold", type=float, default=1.)
    ps.add_argument("-r", "--ref_freq", type=float, default=154.)
    ps.add_argument("-n", "--nmax", type=int, default=100)
    ps.add_argument("-p", "--plot", action="store_true")
    ps.add_argument("-s", "--smooth", type=int, default=0)
    ps.add_argument("-F", "--flux_key", default="flux")


    args = ps.parse_args()

    no_freq = False
    if args.freq is None:
        no_freq = True
        hdr = fits.getheader(args.image)
        if "FREQ" in hdr:
            args.freq = hdr["FREQ"]/1.e6
        elif "CRVAL3" in hdr:
            args.freq = hdr["CRVAL3"]/1.e6
        elif "CENTCHAN" in hdr:
            args.freq = 1.28 * float(hdr["CENTCHAN"])
        else:
            raise ValueError("Unable to get frequency information!")

    with fits.open(args.model_table) as f:

        table = f[1].data

        ratios, indices = fluxscale(table=table, 
                                    freq=args.freq,
                                    threshold=args.threshold,
                                    ref_freq=args.ref_freq,
                                    flux_key=args.flux_key,
                                    nsrc_max=args.nmax,
                                    histnamebase=args.outname)

        correction_map = correction_factor_map(image=args.image,
                                               pra=table["ra"][indices],
                                               pdec=table["dec"][indices],
                                               ratios=ratios,
                                               smooth=args.smooth)

        if args.outname is None:
            args.outname = args.image.replace(".fits", "_scaled.fits")
            logging.info("Setting output filename to {}".format(args.outname))

        apply_corrections(image=args.image,
                          correction_image=correction_map,
                          outname=args.outname)

        if args.plot:

            plot(correction_map, 
                 pra=table["ra"][indices],
                 pdec=table["dec"][indices],
                 ratios=ratios
                 )

    if no_freq:
        with fits.open(args.outname, mode="update") as f:
            f[0].header["FREQ"] = args.freq*1.e6
            f.flush()


if __name__ == "__main__":
    main()