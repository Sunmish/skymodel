#! /usr/bin/env python

import sys

from argparse import ArgumentParser
from skymodel.create_skymodel import create_all_skymodel, get_exclusion_coords

import logging
logging.basicConfig(format="%(levelname)s (%(module)s): %(message)s",
                    level=logging.INFO)

def main():

    description = """
    Create a skymodel using GLEAM (and possibly a combination of NVSS, SUMSS,
    TGSS, and GLEAM).
    """

    help_ = {"g": "Input GLEAM (and N+S) catalogue location(s). If a second "
                  "catalogue is specified, this should be the North+South "
                  "catalogue with RA,DEC,*model_params.",
             "m": "Input metafits file for an MWA observation.",
             "o": "Output filename for the skymodel.",
             "t": "Apparent brightness threshold in Jy for sources. "
                  "[Default 1 Jy]",
             "r": "Radius within which to include sources. [Default 120 deg]",
             "R": "Ratio of source size to beam shape to determine if a source "
                  "is a point source. [Default 1.1]",
             "n": "Maximum number of sources to include in the model. "
                  "The apparent brightness threshold is altered to enforce "
                  "this limit. [Default 100]",
             "p": "Enable plotting.",
             "x": "Existing skymodel format v1.1 files with sources to "
                  "exclude. An exclusion zone of 1 armin is created around "
                  "sources within the specified model(s).",
             "C": "Enable use of a curved powerlaw model for estimating "
                  "flux density at the required frequency. By default, only "
                  "a normal power law is used.",
             "A": "Limiting indices for powerlaw fits - specifically important "
                  "where fits are performed between only two measurements.",
             "amplitude": "Key/name for amplitude/normalization for powerlaw model.",
             "index": "Key/name for powerlaw index.",
             "curvature": "Key/name for powerlaw curvature.",
             "flux0": "Key/name for reference flux.",
             "z": "Reference frequency.",
             "a": "Spectral index for extrapolation.",
             "ra_key": "Key/name for RA column. [Default 'ra']",
             "dec_key": "Key/name for DEC column. [Default 'dec']",
             "ezone": "Exclusion zone around sources. Calibrator sources must not have " \
                      "neighbours within this zone in arcmin. Default 0.5 arcmin.",
             "bezone" : "Exclusion zone around --exclude_model sources. Default 10 arcmin."


            }

    parser = ArgumentParser(description=description)

    parser.add_argument("catalogue", 
                        default=None, help=help_["g"])
    parser.add_argument("metafits", default=None,
                        help=help_["m"])
    parser.add_argument("-o", "--outname", dest="outname", default=None,
                        help=help_["o"])
    parser.add_argument("-t", "--threshold", dest="threshold", default=1., 
                        type=float, help=help_["t"])
    parser.add_argument("-R", "--radius", dest="radius", default=120., 
                        type=float, help=help_["r"])
    parser.add_argument("--exclusion_zone", type=float, default=0.5,
                        help=help_["ezone"])
    parser.add_argument("-n", "--nmax", dest="nmax", default=100, type=int, 
                        help=help_["n"])
    parser.add_argument("-p", "--plot", action="store_true", help=help_["p"])
    parser.add_argument("-x", "--exclude_model", dest="exclude", default=None,
                        help=help_["x"], nargs="*")
    parser.add_argument("--bright_exclusion_zone", type=float, default=10.,
                        help=help_["bezone"])
    parser.add_argument("-i", "--ignore_magellanic", action="store_true")
    parser.add_argument("-C", "--curved", dest="curved", action="store_true",
                        help=help_["C"])
    parser.add_argument("-N", "--use_ns", action="store_true")
    parser.add_argument("--hw", "--full", dest="full", action="store_true")
    parser.add_argument("--alpha_limits", nargs=2, default=[-2., 1.],
                        type=float, help=help_["A"])
    parser.add_argument("-A", "--amplitude", type=str, default=None, 
                        help=help_["amplitude"])
    parser.add_argument("-a", "--index", type=str, default=None, 
                        help=help_["index"])
    parser.add_argument("-c", "--curvature", "--beta", dest="curvature", type=str,
                        default=None, help=help_["curvature"])
    parser.add_argument("-r", "--ref_flux_key", dest="flux0", type=str, default=None,
                        help="flux0")
    parser.add_argument("-z", "--ref_freq", dest="freq0", type=float, default=None,
                        help=help_["z"])
    parser.add_argument("--spectral_index", "--alpha", dest="alpha0", 
                        type=float, default=None, help=help_["a"])
    parser.add_argument("--ra_key", default="ra", type=str, help=help_["ra_key"])
    parser.add_argument("--dec_key", default="dec", type=str, help=help_["dec_key"])
    parser.add_argument("--nlobes", default=1, type=int)
    parser.add_argument("--nfreqs", default=10, type=int)
    options = parser.parse_args()


    if options.metafits is None:
        logging.error("Metafits file not supplied.")
        sys.exit(1)

    if options.outname is None:
        options.outname = options.metafits.replace(".metafits", "_skymodel.txt")

    if options.exclude is not None:
        exclusion_coords = get_exclusion_coords(options.exclude)
    else:
        exclusion_coords = None
    
    create_all_skymodel(table=options.catalogue,
                        metafits=options.metafits,
                        outname=options.outname,
                        threshold=options.threshold,
                        ref_threshold=options.threshold,
                        exclude_coords=exclusion_coords,
                        exclusion_zone=options.exclusion_zone,
                        bright_exclusion_zone=options.bright_exclusion_zone,
                        d_limit=(-90, 45),
                        radius=options.radius,
                        nmax=options.nmax,
                        index_limits=options.alpha_limits,
                        ignore_magellanic=options.ignore_magellanic,
                        flux0=options.flux0,
                        freq0=options.freq0,
                        alpha0=options.alpha0,
                        powerlaw_amplitude=options.amplitude,
                        powerlaw_index=options.index,
                        powerlaw_curvature=options.curvature,
                        ra_key=options.ra_key,
                        dec_key=options.dec_key,
                        nlobes=options.nlobes,
                        nfreqs_to_predict=options.nfreqs)



if __name__ == "__main__":
    main()