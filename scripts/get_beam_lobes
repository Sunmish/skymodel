#! /usr/bin/env python

# comment

import argparse

import numpy as np

from astropy.io import fits
from astropy.coordinates import SkyCoord
from astropy import units as u
from skymodel import get_beam, parsers


def main():

    description = """
    Find the location and approximate size of the lobes of the MWA primary 
    beam. Note that the mainlobe is return as the first lobe.
    """

    ps = argparse.ArgumentParser(description=description)
    ps.add_argument("image", help="Image of the psuedo-Stokes I beam.")
    ps.add_argument("-p", "--perc", type=float, default=0.1,
                    help="Percentage of attenuation out to which determines "
                         "the size of the primary beam. [Default 0.1]")
    ps.add_argument("-m", "--metafits", action="store_true",
                    help="Supply a metafits file to make a primary beam image. "
                         "If this option is used the positional argument should "
                         "be the metafits file.")
    ps.add_argument("-S", "--sidelobes", action="store_true",
                    help="Switch to return only the sidelobes.")
    ps.add_argument("-M", "--mainlobe", action="store_true",
                    help="Switch to return only the mainlobe.")
    ps.add_argument("-P", "--peak", action="store_false", dest="centroid",
                    help="Find peak of lobes rather than centroids. [Default False]")
    ps.add_argument("--nlobes", action="store_true", 
                    help="Print out number of lobes above specified percent level.")

    args = ps.parse_args()

    if args.sidelobes and args.mainlobe:
        return RuntimeError("No lobes to find!")

    if args.metafits:

        t, delays, freq, pnt = parsers.parse_metafits(args.image)
        hdu = get_beam.make_beam_image(t, delays, freq, 
                                       ra=pnt.ra.value,
                                       return_hdu=True)

    else:

        hdu = fits.open(args.image)[0]

    lobe_table = get_beam.find_lobes(hdu, 
        perc=args.perc,
        centroid=args.centroid, 
        return_table=True)
    lobe_coords = SkyCoord(ra=lobe_table["ra"],
        dec=lobe_table["dec"],
        unit=(u.deg, u.deg))
    main_lobe = None
    if args.metafits:
        # mainlobe is one closest to pointing centre
        lobe_seps = pnt.separation(lobe_coords).value
        main_lobe = np.argmin(lobe_seps)
    else:
        # mainlobe is brightest lobe
        main_lobe = 0


    if not args.nlobes:
        if not args.sidelobes and main_lobe is not None:
            # Main lobe:
            print("main: {:.2f} {:.2f} {:.2f}".format(lobe_table[main_lobe]["ra"], 
                                                    lobe_table[main_lobe]["dec"], 
                                                    lobe_table[main_lobe]["size"]))
        if not args.mainlobe:
            for i in range(len(lobe_table)):
                if i != main_lobe:
                    print("side: {:.2f} {:.2f} {:.2f}".format(lobe_table[i]["ra"],
                                                            lobe_table[i]["dec"],
                                                            lobe_table[i]["size"]))
    else:
        print(len(lobe_table))


if __name__ == "__main__":
    main()
