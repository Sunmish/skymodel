#! /usr/bin/env python

import numpy as np

from argparse import ArgumentParser

from skymodel.parsers import parse_ao
from skymodel.model_image import create_model, convolve_model


def main():

    description_ = """
    Create a model image and optionally convolve with a beam and add noise. 
    Requires an AO-style model file with point- and/or Gaussian components.
    """

    epilog_ = """
    If a reference image is supplied, setting specific parameters (e.g. MAJOR)
    will overwrite the value in the reference image header.
    """

    help_ = {"c": "Central coordinates of image, separated by a space.",\
             "s": "Image size in pixels. The image will be square. [Default 300]",
             "p": "Pixel size in degrees. [Default 0.002 deg]",
             "o": "Output filename.",
             "A": "AO-style calibration file.",
             "f": "Frequency to create model at in MHz.",
             "a": "Spectral index used to estimate flux density at the required "
                  "frequency when only a single measurement is available. "
                  "[Default -0.77]",
             "C": "Switch to enable curved powerlaw fitting.",
             "M": "Major axis for beam of \"restored\" image.",
             "m": "Minor axis for beam of \"restored\" image.",
             "R": "RMS noise of \"restored\" image in Jy.",
             "I": "Reference image for RA, DEC, output image size, pixel size, "
                  "and frequency.",
             "r": "Switch to enable making a \"restored\" image.",
             "N": "Switch to ignore negative model components."
             }

    ps = ArgumentParser(description=description_, epilog=epilog_)

    ps.add_argument("aofile", type=str, default=None, nargs="*", 
                    help=help_["A"])

    opt_ps = ps.add_argument_group("general options")
    opt_ps.add_argument("-o", "--outname", 
                        type=str, default=None, help=help_["o"])
    opt_ps.add_argument("-I", "--image", 
                        type=str, default=None, help=help_["I"])
    opt_ps.add_argument("-c", "--coords", 
                        type=float, default=None, nargs=2, help=help_["c"], 
                        metavar=("RA", "DEC"))
    opt_ps.add_argument("-s", "--imsize", 
                        type=int, default=300, help=help_["s"])
    opt_ps.add_argument("-p", "--pixsize", 
                        type=float, default=0.002, help=help_["p"])
    opt_ps.add_argument("-f", "--freq", 
                        type=float, default=None, help=help_["f"])
    opt_ps.add_argument("-a", "--alpha", 
                        type=float, default=-0.77, help=help_["a"])
    opt_ps.add_argument("-C", "--curved", 
                        action="store_true", help=help_["C"])
    opt_ps.add_argument("-N", "--nonegative", 
                        action="store_true", help=help_["N"])

    restore_ps = ps.add_argument_group("restore options")
    restore_ps.add_argument("-r", "--restore", action="store_true", help=help_["r"])
    restore_ps.add_argument("-M", "--major", type=float, default=None, help=help_["M"])
    restore_ps.add_argument("-m", "--minor", type=float, default=None, help=help_["m"])
    restore_ps.add_argument("-P", "--pa", type=float, default=0.)
    restore_ps.add_argument("-R", "--rms", type=float, default=None, help=help_["R"])

    args = ps.parse_args()

    if args.aofile is None:
        raise ValueError("An AO-style model file must be specified.")

    if args.image is not None:
        ref_hdr = fits.getheader(args.image)
        if args.coords is None:
            args.coords = [ref_hdr["CRVAL1"], ref_hdr["CRVAL2"]]
        if args.imsize is None:
            args.imsize = ref_hdr["NAXIS1"]
        if args.pixsize is None:
            if "CDELT1" in ref_hdr.keys():
                args.pixsize = abs(ref_hdr["CDELT1"])
            elif "CD1_1" in ref_hdr.keys():
                args.pixsize = abs(ref_hdr["CD1_1"])
            else:
                raise ValueError("No pixel information found in {}".format(
                                 args.image))
        if args.major is None and args.restore:
            args.major = ref_hdr["BMAJ"]*3600.
        if args.minor is None and args.restore:
            args.minor = ref_hdr["BMIN"]*3600.


    for aofile in args.aofile:

        if args.outname is None:
            outname = aofile.replace(".txt", ".fits")
        else:
            outname = args.outname

        sources = parse_ao(aofile)

        gaussians = []
        points = []

        for source in sources:

            source.at_freq(args.freq*1.e6, 
                           components=range(source.ncomponents),
                           curved=args.curved,
                           alpha=-0.77,
                           nearest_freq=5.)

            for component in source.components:

                if args.nonegative and component.at_flux < 0.:
                        pass

                elif component.a is None:

                    
                        point = (component.radec.ra.value,
                                 component.radec.dec.value,
                                 component.at_flux)

                        points.append(point)

                else:

                    # Gaussian component:
                    gaussian = (component.radec.ra.value,
                                component.radec.dec.value,
                                component.a/3600.,
                                component.b/3600.,
                                component.pa,
                                component.at_flux)

                    gaussians.append(gaussian)


        if args.coords is None:
            ra = np.nanmean([r[0] for r in points] + [r[0] for r in gaussians])
            dec = np.nanmean([d[1] for d in points] + [d[1] for d in gaussians])
            args.coords = (ra, dec)

            print(args.coords)

        create_model(ra=args.coords[0], 
                     dec=args.coords[1],
                     imsize=args.imsize,
                     pixsize=args.pixsize,
                     outname=outname,
                     gaussians=gaussians,
                     points=points)

        if args.major is not None:

            convolve_model(model_image=outname,
                           major=args.major,
                           minor=args.minor,
                           pa=args.pa, 
                           rms=args.rms,
                           outname=outname.replace(".fits", "_cvl.fits"))


if __name__ == "__main__":
    main()