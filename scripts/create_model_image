#! /usr/bin/env python

from skymodel import model_image
import os

from argparse import ArgumentParser





def main():
	"""
	"""

	ps = ArgumentParser(description="""
		Construct a model image with Gaussian/point sources. A common list is used
		for all sources, so put Gaussian sources first.
		""")

	ps.add_argument("-t", "--template", help="Template image for WCS.")
	ps.add_argument("-crpix", dest="crpix", nargs=2, type=int, default=None,
		help="CRPIXi,j if no template image is supplied.")
	ps.add_argument("-crval", dest="crval", nargs=2, type=float, 
		help="CRVALi,j if no template image is supplied.")
	ps.add_argument("-naxis", dest="naxis", nargs=1, type=int, 
		help="NAXIS if no template image is supplied. Square image only.")
	ps.add_argument("-cdelt", dest="cdelt", nargs=2, type=float, 
		help="CDELT if no template image is supplied. Square pixels only.")
	ps.add_argument("-o", "--outname", default="model.fits",
		help="Base output filename. '-model' and '-convolved' appended.")

	ps.add_argument("-r", "--ra", nargs="*", type=float, 
		help="RA of sources.")
	ps.add_argument("-d", "--dec", nargs="*", type=float,
		help="DEC of sources.")
	ps.add_argument("-I", "--integrated", nargs="*", type=float,
		help="Integrated flux density of Gaussian sources.")
	ps.add_argument("-M", "--major", nargs="*", type=float,
		help="Major axes of Gaussian sources. In deg.")
	ps.add_argument("-m", "--minor", nargs="*", type=float,
		help="Minor axes of Gaussian sources. In deg.")
	ps.add_argument("-p", "--pa", nargs="*", type=float,
		help="PA of Gaussian sources.")
	ps.add_argument("-B", "--bmaj", type=float, default=None,
		help="BMAJ for convolved image. In deg.")
	ps.add_argument("-b", "--bmin", type=float, default=None,
		help="BMIN for convolved image. In deg.")
	ps.add_argument("--bpa", type=float, default=0.,
		help="BPA for convolved image. Default 0 deg.")
	ps.add_argument("--nobpp", action="store_true")


	args = ps.parse_args()

	gaussians = []
	points = []

	if args.major is None:
		n_gauss = 0
	else:
		n_gauss = len(args.major)
	for i in range(len(args.ra)):
		if i < n_gauss:
			gaussians.append([args.ra[i], 
				args.dec[i],
				args.major[i],
				args.minor[i],
				args.pa[i],
				args.integrated[i]])
		else:
			points.append([args.ra[i],
				args.dec[i],
				args.integrated[i]])

	print(">>> adding {} Gaussians and {} points.".format(
		len(gaussians), len(points)))
	if args.template is not None:

		model_image.create_model_on_template(args.template,
			gaussians=gaussians,
			points=points,
			outname=args.outname.replace(".fits", "")+"-model.fits")

	else:
		model_image.create_model(ra=args.crval[0],
			dec=args.crval[1],
			imsize=args.naxis,
			pixsize=arga.crval,
			crpix=args.crpix,
			gaussians=gaussians,
			points=points,
			outname=args.outname.replace(".fits", "")+"-model.fits")


	if args.bmaj is not None:
		
		if args.bmin is None:
			args.bmin = args.bmaj

		model_image.convolve_model(args.outname.replace(".fits", "")+"-model.fits",
			major=args.bmaj*3600.,
			minor=args.bmin*3600.,
			pa=args.bpa*3600.,
			outname=args.outname.replace(".fits", "")+"-convolved.fits",
			no_bpp=args.nobpp)


if __name__ == "__main__":
	main()