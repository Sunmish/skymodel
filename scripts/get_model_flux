#! /usr/bin/env python

from __future__ import print_function
from argparse import ArgumentParser

from astropy.coordinates import SkyCoord
from astropy import units as u

from skymodel.model_flux import total_flux


def main():

    parser = ArgumentParser(description="Get total flux density from a skymodel, "
                                        "optionally attenuating by the primary "
                                        "beam response for a given observation.")
    parser.add_argument("-a", "--aocal", "--aofile", dest="aocal", default=None, 
                        help="Skymodel format 1.0/1.1 file.")
    parser.add_argument("-f", "--freq", dest="freq", default=None, 
                        help="Frequency in MHz at which to estimate flux density",
                        type=float)
    parser.add_argument("-m", "--metafits", dest="metafits", default=None, 
                        help="MWA metafits file to read frequency from.")
    parser.add_argument("-s", "--alpha", "--si", dest="alpha", default=-0.7,
                        help="Spectral index used to estimate flux if only "
                        "one flux density measurement available for a component.",
                        type=float)
    parser.add_argument("-A", "--attenuate", dest="atten", action="store_true", 
                         help="Switch True if wanting to attenuate by the primary "
                              "beam response. To do this, a metafits file must "
                              "be specified.")
    parser.add_argument("-C", "--curved", dest="curved", action="store_true",
                        help="Switch true if wanting to use a curved power "
                             "law model for sources with > 3 measurements.")
    parser.add_argument("--coords", action="store_true",
                        help="Switch to also print out mean coordinates of a model.")


    args = parser.parse_args()

    if args.aocal is None:
        raise ValueError("Skymodel format 1.0/1.1 file required.")
    if (args.metafits is None) and (args.freq is None):
        raise ValueError("Frequency information needed.")

    params = total_flux(aocal=args.aocal,
                       freq=args.freq,
                       alpha=args.alpha,
                       metafits=args.metafits,
                       attenuate=args.atten,
                       curved=args.curved,
                       return_coords=args.coords)

    if args.coords:
        coord = SkyCoord(
            ra=params[1]*u.deg, dec=params[2]*u.deg
        )
        ra = coord.ra.to_string(u.hourangle, precision=0, sep=":", pad=True)
        dec = coord.dec.to_string(u.deg, alwayssign=True, precision=1, sep=":", pad=True)
        print("{:g}".format(float("{:.{p}g}".format(params[0], p=2))) +  " {} {}".format(ra, dec))
    else:
        print("{}".format(params))



if __name__ == "__main__":
    main()

    



